<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>泉州暑假集训Day 1</title>
      <link href="/2023/07/23/quan-zhou-shu-jia-ji-xun-day-1/"/>
      <url>/2023/07/23/quan-zhou-shu-jia-ji-xun-day-1/</url>
      
        <content type="html"><![CDATA[<p>PS: This is a note.</p><h3 id="数据排序"><a href="#数据排序" class="headerlink" title="数据排序"></a>数据排序</h3><span id="more"></span><h4 id="①选择排序-不稳定的排序"><a href="#①选择排序-不稳定的排序" class="headerlink" title="①选择排序: 不稳定的排序"></a>①选择排序: 不稳定的排序</h4><h5 id="e-g-输入n个数-将n个数从小到大排序"><a href="#e-g-输入n个数-将n个数从小到大排序" class="headerlink" title="e.g. 输入n个数,将n个数从小到大排序"></a>e.g. 输入n个数,将n个数从小到大排序</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="②冒泡排序-从后往前排列元素"><a href="#②冒泡排序-从后往前排列元素" class="headerlink" title="②冒泡排序: 从后往前排列元素"></a>②冒泡排序: 从后往前排列元素</h4><h5 id="e-g-将6-3-1-2-5-4从小到大排序"><a href="#e-g-将6-3-1-2-5-4从小到大排序" class="headerlink" title="e.g. 将6,3,1,2,5,4从小到大排序"></a>e.g. 将6,3,1,2,5,4从小到大排序</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i=1;i=n;i++){    for(int j=1;j&lt;=n;j++)    {        swap(a[i],a[j+1]);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注: swap是交换函数</p><h4 id="③插入排序-将元素插入一个有序表中"><a href="#③插入排序-将元素插入一个有序表中" class="headerlink" title="③插入排序: 将元素插入一个有序表中"></a>③插入排序: 将元素插入一个有序表中</h4><h5 id="e-g-d"><a href="#e-g-d" class="headerlink" title="e.g. d"></a>e.g. d</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="④桶排序-若待排序值在一个有限范围内时，可设置有限桶，最后输出各个桶的值，得出有序表的值"><a href="#④桶排序-若待排序值在一个有限范围内时，可设置有限桶，最后输出各个桶的值，得出有序表的值" class="headerlink" title="④桶排序: 若待排序值在一个有限范围内时，可设置有限桶，最后输出各个桶的值，得出有序表的值"></a>④桶排序: 若待排序值在一个有限范围内时，可设置有限桶，最后输出各个桶的值，得出有序表的值</h4><h5 id="e-g-明明的随机数"><a href="#e-g-明明的随机数" class="headerlink" title="e.g. 明明的随机数"></a>e.g. 明明的随机数</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="⑤快速排序-最好的内部排序方法"><a href="#⑤快速排序-最好的内部排序方法" class="headerlink" title="⑤快速排序: 最好的内部排序方法"></a>⑤快速排序: 最好的内部排序方法</h4><h5 id="e-g-de"><a href="#e-g-de" class="headerlink" title="e.g. de"></a>e.g. de</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注: sort是快排函数</p><h4 id="⑥归并排序-两个组的比较"><a href="#⑥归并排序-两个组的比较" class="headerlink" title="⑥归并排序: 两个组的比较"></a>⑥归并排序: 两个组的比较</h4><h5 id="e-g-d-1"><a href="#e-g-d-1" class="headerlink" title="e.g. d"></a>e.g. d</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="⑦希尔排序-直接插入排序算法的一种更高效的优化算法，非稳定排序算法，类似于宏观调控"><a href="#⑦希尔排序-直接插入排序算法的一种更高效的优化算法，非稳定排序算法，类似于宏观调控" class="headerlink" title="⑦希尔排序: 直接插入排序算法的一种更高效的优化算法，非稳定排序算法，类似于宏观调控"></a>⑦希尔排序: 直接插入排序算法的一种更高效的优化算法，非稳定排序算法，类似于宏观调控</h4><h5 id="e-g-dh"><a href="#e-g-dh" class="headerlink" title="e.g. dh"></a>e.g. dh</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="⑧基数排序-属于分配式排序"><a href="#⑧基数排序-属于分配式排序" class="headerlink" title="⑧基数排序: 属于分配式排序"></a>⑧基数排序: 属于分配式排序</h4><h5 id="e-g-dl"><a href="#e-g-dl" class="headerlink" title="e.g. dl"></a>e.g. dl</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="⑨堆排序-一种近似完全二叉树的结构"><a href="#⑨堆排序-一种近似完全二叉树的结构" class="headerlink" title="⑨堆排序: 一种近似完全二叉树的结构"></a>⑨堆排序: 一种近似完全二叉树的结构</h4><h5 id="e-g-dm"><a href="#e-g-dm" class="headerlink" title="e.g. dm"></a>e.g. dm</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="模拟枚举"><a href="#模拟枚举" class="headerlink" title="模拟枚举"></a>模拟枚举</h3><p>PS: 简单，不写了</p><h3 id="递推算法"><a href="#递推算法" class="headerlink" title="递推算法"></a>递推算法</h3><h4 id="e-g-数字三角形"><a href="#e-g-数字三角形" class="headerlink" title="e.g. 数字三角形"></a>e.g. 数字三角形</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="e-g-斐波那契数列——-1-1-2-3-5-8…"><a href="#e-g-斐波那契数列——-1-1-2-3-5-8…" class="headerlink" title="e.g. 斐波那契数列—— 1,1,2,3,5,8…"></a>e.g. 斐波那契数列—— 1,1,2,3,5,8…</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main() {int n,fn,fn_1=1,fn_2=1,f[101]={0,1,1,2};cin&gt;&gt;n;for(int i=3;i&lt;=n;i++){//原代码    f[i]=f[i-1]+f[i-2];    //优化后fn=fn_1+fn_2;    fn_2=fn_1;    fn_1=fn;}cout&lt;&lt;f[n]&lt;&lt;endl&lt;&lt;fn;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="e-g-昆虫繁殖"><a href="#e-g-昆虫繁殖" class="headerlink" title="e.g. 昆虫繁殖"></a>e.g. 昆虫繁殖</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="e-g-位数问题"><a href="#e-g-位数问题" class="headerlink" title="e.g. 位数问题"></a>e.g. 位数问题</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="e-g-过河卒"><a href="#e-g-过河卒" class="headerlink" title="e.g. 过河卒"></a>e.g. 过河卒</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="e-g-卡特兰数"><a href="#e-g-卡特兰数" class="headerlink" title="e.g. 卡特兰数"></a>e.g. 卡特兰数</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h4><h5 id="e-g-给定n-n-gt-x3D-1-算1到n的累加和"><a href="#e-g-给定n-n-gt-x3D-1-算1到n的累加和" class="headerlink" title="e.g. 给定n(n>=1),算1到n的累加和"></a>e.g. 给定n(n&gt;=1),算1到n的累加和</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="e-g-汉诺塔"><a href="#e-g-汉诺塔" class="headerlink" title="e.g. 汉诺塔"></a>e.g. 汉诺塔</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注: 永远没有最优的算法</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> 学习记录 </category>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js安装详解</title>
      <link href="/2023/06/30/node-js-an-zhuang-xiang-jie/"/>
      <url>/2023/06/30/node-js-an-zhuang-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="Step1：下载安装包"><a href="#Step1：下载安装包" class="headerlink" title="Step1：下载安装包"></a>Step1：下载安装包</h4><p><a href="https://nodejs.org/zh-cn/download/">先进官网下个安装包</a></p><span id="more"></span><p><img src="/../img/nodejs%E5%AE%89%E8%A3%85/nodejs%E5%AE%89%E8%A3%851.PNG" alt="官网"></p><p><a href="https://registry.npmmirror.com/binary.html?path=node/latest-v20.x/">或者从镜像站下（我也不知道为什么镜像站的版本竟然比官网的高，How amazing!）</a></p><p><img src="/../img/nodejs%E5%AE%89%E8%A3%85/nodejs%E5%AE%89%E8%A3%852.PNG" alt="Windows版"></p><p><img src="/../img/nodejs%E5%AE%89%E8%A3%85/nodejs%E5%AE%89%E8%A3%853.PNG" alt="Linux版"></p><h4 id="Step2：安装程序"><a href="#Step2：安装程序" class="headerlink" title="Step2：安装程序"></a>Step2：安装程序</h4><h5 id="1-下载完成后，双击安装包，开始安装Node-js"><a href="#1-下载完成后，双击安装包，开始安装Node-js" class="headerlink" title="1.下载完成后，双击安装包，开始安装Node.js"></a>1.下载完成后，双击安装包，开始安装Node.js</h5><p><img src="/../img/nodejs%E5%AE%89%E8%A3%85/nodejs%E5%AE%89%E8%A3%854.PNG" alt=" "></p><p>注：这中间应该还有一个设置安装路径的界面，但我已经安装过了，所以没有，可按照个人需求修改</p><p><img src="/../img/nodejs%E5%AE%89%E8%A3%85/nodejs%E5%AE%89%E8%A3%855.PNG" alt="一路回车(&quot;next&quot;)"></p><h5 id="2-按照个人需求决定是否选中，一般不需要，决定后点击【Next】按钮"><a href="#2-按照个人需求决定是否选中，一般不需要，决定后点击【Next】按钮" class="headerlink" title="2.按照个人需求决定是否选中，一般不需要，决定后点击【Next】按钮"></a>2.按照个人需求决定是否选中，一般不需要，决定后点击【Next】按钮</h5><p><img src="/../img/nodejs%E5%AE%89%E8%A3%85/nodejs%E5%AE%89%E8%A3%856.png" alt=" "></p><h5 id="3-点击Install安装，完成后点击Finish"><a href="#3-点击Install安装，完成后点击Finish" class="headerlink" title="3.点击Install安装，完成后点击Finish"></a>3.点击Install安装，完成后点击Finish</h5><h5 id="4-测试是否安装"><a href="#4-测试是否安装" class="headerlink" title="4.测试是否安装"></a>4.测试是否安装</h5><p>按下【win+R】键，输入cmd，打开cmd窗口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token parameter variable">-v</span>     // 显示node.js版本<span class="token function">npm</span> <span class="token parameter variable">-v</span>      // 显示npm版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Step3：测试和配置"><a href="#Step3：测试和配置" class="headerlink" title="Step3：测试和配置"></a>Step3：测试和配置</h4><h5 id="1-npm安装测试"><a href="#1-npm安装测试" class="headerlink" title="1.npm安装测试"></a>1.npm安装测试</h5><p>试试安装常用的express模块</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// -g代表全局安装<span class="token function">npm</span> <span class="token function">install</span> express <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../img/nodejs%E5%AE%89%E8%A3%85/nodejs%E5%AE%89%E8%A3%857.png" alt="一般没出现ERR或者卡住的现象都是成功的（图为失败的界面）"></p><p>成功的界面最新版只会显示“added n packages in n s.”（n为变量）</p><h5 id="2-npm换源"><a href="#2-npm换源" class="headerlink" title="2.npm换源"></a>2.npm换源</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 安装镜像    <span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org// 查看是否成功    <span class="token function">npm</span> config get registry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>OK，本篇博客到此结束，下次我要阐述的便是“使用博客框架Hexo+Github搭建独属于自己的静态博客”了，Bye-bye~~ .</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> 安装 </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
